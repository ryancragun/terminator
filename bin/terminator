#!/usr/bin/env ruby

require 'rubygems'
require 'trollop'
require_relative '../lib/terminator.rb'

def to_bool(str)
  str == 'true'
end

opts = Trollop::options do
  version = "v3.0 Ryan Cragun"
  banner <<-EOS
  Terminator is a command line utility for scraping RightScale accounts and terminating resources. 

  Usage:
  ./terminator [options]
  [options] are:
  EOS
  
  opt :server_hours, "Minimum number of hours server must have been running to qualify for termination", :type => :string, :short => "s"
  opt :volume_hours, "Minimum number of hours volume must have been unattached to qualify for termination", :type => :string, :short => "v"
  opt :snapshot_hours, "Minimum number of hours snapshot must be to qualify for termination", :type => :string, :short => "n"
  opt :array_hours, "Minimum number of hours array instances must have been running to qualify for termination", :type => :string, :short => "a"
  opt :array_threshold, "Percentage of instances flagged to disable array, eg: 50%", :type => :string
  opt :safe_words, "An array of safe words that prevents a server from being shut down. Must be included in the server nickname or as a terminator tag", :type => :strings, :short => "w"
  opt :admin_email, "Email address to send all termination notifications", :type => :string, :short => "m"
  opt :disable_user_email, "true|false: enable or disable email notifcations to user who launched server.  Currently available on Ec2 Servers only", :type => :string
  opt :disable_admin_email, "true|false: enable or disable all email termination notification", :type => :string
  opt :account_ids, "An array of Account ID(s) that you wish to parse.", :type => :strings, :short => "i"
  opt :tag, "Tag namespace for terminator to track servers", :type => :string, :short => "t"
  opt :terminator_email, "Email address that will send notification emails", :type => :string
  opt :admin_cc_list, "An array of email addresses to CC the Admin reports to", :type => :strings, :short => "c"
  opt :mail_server, "Local mail server to use, eg :sendmail", :type => :string
  opt :terminate_servers, "true|false: enable or disable server termination", :default => true
  opt :terminate_arrays, "true|false: enable or disable server termination", :default => true
  opt :terminate_volumes, "true|false: enable or disable volume termination", :default => true
  opt :terminate_snapshots, "true|false: enable or disable snapshot termination", :default => true
end

enabled = {:servers => opts[:terminate_servers],
           :arrays => opts[:terminate_arrays],
           :volumes => opts[:terminate_volumes],
           :snapshots => opts[:terminate_snapshots]}

opts.select! {|k,_| ! k.match /\w+_given|terminate_\w+/}
opts.delete(:help)
opts[:disable_user_email] = to_bool(opts[:disable_user_email]) if opts[:disable_user_email]
opts[:disable_admin_email] = to_bool(opts[:disable_admin_email]) if opts[:disable_admin_email]
opts.select! {|_,v| ! v.nil?}
opts.select {|k,_v| k.match /\w+_hours/}.each {|k| opts[k[0]] = k[1].to_i}

unless opts.empty?
  Terminator::ServerTerminator.new(opts).terminate if enabled[:servers]
  Terminator::ServerArrayTerminator.new(opts).terminate if enabled[:arrays]
  Terminator::VolumeTerminator.new(opts).terminate if enabled[:volumes]
  Terminator::SnapshotTerminator.new(opts).terminate if enabled[:snapshots]
else
  Terminator::ServerTerminator.new.terminate if enabled[:servers]
  Terminator::ServerArrayTerminator.new.terminate if enabled[:arrays]
  Terminator::VolumeTerminator.new.terminate if enabled[:volumes]
  Terminator::SnapshotTerminator.new.terminate if enabled[:snapshots]
end
